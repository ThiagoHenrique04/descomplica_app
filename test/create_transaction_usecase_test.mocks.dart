// Mocks generated by Mockito 5.4.4 from annotations
// in descomplica_app/test/create_transaction_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:descomplica_app/features/transactions/data/transaction_datasource.dart'
    as _i2;
import 'package:descomplica_app/models/transaction_model.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TransactionDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDataSource extends _i1.Mock
    implements _i2.TransactionDataSource {
  MockTransactionDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTransaction(_i4.TransactionModel? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [transaction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTransaction(_i4.TransactionModel? transaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTransaction,
          [transaction],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTransaction(
    String? userId,
    String? transactionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransaction,
          [
            userId,
            transactionId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.TransactionModel>> getTransactions(
    String? userId, {
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i3.Future<List<_i4.TransactionModel>>.value(
            <_i4.TransactionModel>[]),
      ) as _i3.Future<List<_i4.TransactionModel>>);

  @override
  _i3.Future<_i4.TransactionModel?> getTransactionById(
    String? userId,
    String? transactionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionById,
          [
            userId,
            transactionId,
          ],
        ),
        returnValue: _i3.Future<_i4.TransactionModel?>.value(),
      ) as _i3.Future<_i4.TransactionModel?>);

  @override
  _i3.Future<Map<String, double>> getSummary(
    String? userId, {
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSummary,
          [userId],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i3.Future<Map<String, double>>.value(<String, double>{}),
      ) as _i3.Future<Map<String, double>>);
}
